<p>We all started with learning the basic concepts of image processing using OpenCV. Simultaneously, we started getting accustomed to the various features of Raspberry Pi . Also, we decided the mechanical system which we will be implementing. Initially, we were confused whether we will use gripper mechanism or electromagnet mechanism.</p><p>After this , one group started working on the basic two player chess code i.e. defining all the valid moves of the game and the basic rules like checkmate , check etc. Simultaneously, we installed wifi drivers and openCV(long process) on Raspberry Pi. The second group made the basic algorithm for image processing, which was required to identify the move. But later we decided to keep image processing on hold, as efficiency of some of the functions couldn’t be tested until the board was ready. We then decided to use electromagnets as the board would look more presentable as the entire circuitry would be hidden beneath. </p><p>Later On, prepared a list of required list of required electrical and mechanical components(written in component session) and made a trip to Lamington Road for the former and Nagdevi for the latter . After coming back, one group started working on socket programming while the second group started making the box which would house the entire system. Dimensions were noted (60cmx60cm) and required wooden pieces were bought. The shafts were then attached with the help of clamps. A motor housing was required to house the stepper motor along with the linear bearings. The housing model was made with the help of solidworks and then 3D printed. Thus, the first motor moved on the shaft with the help of linear bearings (see pictures).The stepper motors moved on racks fixed on the base of the box. On the two housings 3D printed, a plank was placed </p><p>perpendicularly on which a similar housing was to be done for the second motor. This motor hence moved perpendicular to the initial motor. Thus, the first motor determined the x-coordinate and the second one determined the y-coordinate. The housing for the second motor was a very big problem due to unfortunate circumstances like the 3D printer stopped working , we made a wood housing but was not perfect etc. Finally, we made a simple housing out of aluminium. After making this first board, we decided that rather than making a second similar board, its better to make a GUI for the second board. (Cause making the second board won’t lead to any learning as well as it will consume a lot of our time)</p><p>As far as sockets(read Concept Section) is concerned, we setup a socket server in which the laptop and raspberry pi were the clients. </p><p>After completing the base of the box, we learnt the code for the working of the stepper motor whose driver also caused some pains as mentioned in the problems faced section. Anyways, we checked the working of the motor with the raspberry pi. Later on, we made a PCB to house the Raspberry Pi pins and the motor drivers for the two motors. Then , we made some temporary wiring connections and started to check the motion of the motors. We were successful in moving the motors one after the other. </p><p>Then, we completed the walls of the box, and got a printout of our required chessboard of appropriate size. We again went back to image processing and completed our algorithm for finding the move played by the player. We used chess corners function of OpenCV to calibrate. Then, we used Canny_Detection to detect whether a piece is present on a square or not. Then , another algorithm was used to detect the color of the piece if present. Thus, everytime we could print the chessboard after every move! Also, We could now also control the motors wirelessly! Thus, all our basic modules were completed. You will find all our codes on the GitHub links posted before.</p><p>The most important remaining now was to integrate all these modules simultaneously i.e. the image processing , the socket code , the motion of the motors together into the main code and test it! As expected it gave a lot of problems. We couldn’t find magnets of the appropriate strength. But later on, after some alternatives everything worked out. We were able to click images from a web-cam , the move was played on laptop GUI. Then , a move was played on laptop which was relayed to our bot and it was played on it, thus completing our aim!          </p>