<p><span style="font-family: Arial;"><inline style="color: rgb(0, 0, 0);"></inline></span></p><h3><span style="font-family: Arial;"><inline style="color: rgb(0, 0, 0);">Artificial Intelligence</inline></span></h3><h5 style="margin-left: 20px;"><span style="font-family: Arial;"><inline style="color: rgb(0, 0, 0);">We have used MinMax algorithm with alpha-beta pruning for our project. The heuristic function has been designed as explained :</inline></span></h5><h5 style="margin-left: 40px;"><span style="font-family: Arial;"><inline style="color: rgb(0, 0, 0);">
	1. The heuristic function is 
proportional to the power of number of chips that are continuous in a 
row/column/diagonal. This is added up for every row,column and diagonal.</inline></span></h5><h5 style="margin-left: 40px;"><span style="font-family: Arial;"><inline style="color: rgb(0, 0, 0);">Note: The value calculated for each 
row/column/diagonal has a positive or negative sign depending on which 
coloured chips are present consecutively in that row or column.</inline></span></h5><h5 style="margin-left: 40px;"><span style="font-family: Arial;"><inline style="color: rgb(0, 0, 0);">
	2. The heuristic function gives a very high value(like INT_MAX) to 4 chips continuous in a row/column/diagonal.</inline></span></h5><p style="margin-left: 40px;">     </p><p style="margin-left: 40px;"><br><span style="font-family: Arial;"><inline style="color: rgb(0, 0, 0);"></inline></span></p><p style="margin-left: 40px;"> </p><p style="margin-left: 40px;"> </p><h3><span style="font-family: Arial;"><inline style="color: rgb(0, 0, 0);">Image Processing</inline></span></h3><h5 style="margin-left: 20px;"><span style="font-family: Arial;"><inline style="color: rgb(0, 0, 0);"><a href="https://en.wikipedia.org/wiki/OpenCV" target="_blank">OpenCV</a> is used for Image Processing.</inline></span></h5><h5 style="margin-left: 20px;"><span style="font-family: Arial;"><inline style="color: rgb(0, 0, 0);"><a href="http://docs.opencv.org/modules/highgui/doc/reading_and_writing_images_and_video.html#videocapture" target="_blank">VideoCapture()</a> class is used to get a continuous stream of the image (of the 
board) using laptop webcam. This image of the board is first reduced to 
7:6 ratio since the board has the same ratio of dimensions. The <a href="http://docs.opencv.org/modules/core/doc/operations_on_arrays.html#inrange" target="_blank">inRange()</a> method is used on image matrix( <a href="http://docs.opencv.org/modules/core/doc/basic_structures.html#mat" target="_blank">Mat</a> ) to filter colors. We need only yellow and red colors, hence inRange() is 
correspondingly used. The range we used is in terms of the HSV values. 
Hence, red and yellow colors separate into binary images. Using the binary images, current state of board is obtained.</inline></span></h5><h5 style="margin-left: 20px;"><span style="font-family: Arial;"><inline style="color: rgb(0, 0, 0);">Once the board is confirmed to be valid, game proceeds accordingly.</inline></span></h5><p style="margin-left: 20px;"></p><p style="margin-left: 20px;">    <br><span style="font-family: Arial;"><inline style="color: rgb(0, 0, 0);"></inline></span></p><h3><span style="font-family: Arial;"><inline style="color: rgb(0, 0, 0);">Electronic/Mechanics</inline></span></h3><h5 style="margin-left: 20px;"><span style="color: rgb(0, 0, 0);"><inline style="font-family: Arial;">The coin-dispensing mechanism was probably the most challenging part of the project. By using a vertical stack of horizontally kept coins, it was very difficult to design a simple mechanism to drop only one coin at a time. Hence, we used a vertical stack of vertically kept coins for this purpose.</inline></span></h5><h5 style="margin-left: 20px;"><span style="font-family: Arial;"><inline style="color: rgb(0, 0, 0);"> A Servo 
motor is used for dispensing of coins. A DC motor is used for running a 
conveyor belt that holds the dispenser and Servo Motor. The Arduino code first asks
 the DC Motor to rotate at a certain fixed speed for a fixed time (which
 is a function of the column number). Then the Servo motor is rotated by a fixed angle to 
drop one chip and rotated back to its initial position. The DC Motor is 
then rotated in the reverse direction to attain the initial position. </inline></span></h5><h5 style="margin-left: 20px;"><span style="font-family: Arial;"><inline style="color: rgb(0, 0, 0);">Initially, we used a Stepper Motor instead of the DC Motor. This was because a Stepper Motor gives higher accuracy than a DC Motor. Unfortunately, this didn't work out because the Stepper wasn't giving enough torque to move the conveyor belt along with the dispenser-servo. The Stepper was running at a maximum speed of 60RPM, but we required greater speeds and torques. </inline></span></h5><h5 style="margin-left: 20px;"><span style="font-family: Arial;"><inline style="color: rgb(0, 0, 0);">The DC motor also has its own limitations. We have observed that the DC motor is not very accurate, especially at high speeds. While using the DC motor at 200 RPM, we have seen significant inaccuracies.This is one of the limitations of our project. <br></inline></span></h5>