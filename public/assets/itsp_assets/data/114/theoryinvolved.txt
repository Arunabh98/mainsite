<h3>Android Bluetooth API:</h3><p>
	The Android platform includes support for the Bluetooth network stack, which allows a device to wirelessly exchange data with other Bluetooth devices.Using the Bluetooth APIs, an Android application can perform the following:</p><ul>
	<li>Scan for other Bluetooth devices</li>	<li>Query the local Bluetooth adapter for paired Bluetooth devices</li>	<li>Transfer data to and from other devices</li></ul><p>
	Classes and interfaces  needed to create Bluetooth connections are:</p><h4></h4><h4>1. BluetoothAdapter:</h4><h4></h4><h5>
<p>
	Represents the local Bluetooth adapter (Bluetooth radio). The 
	<a href="http://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html" style="font-family: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit;" target="_blank">BluetoothAdapter</a>  is the entry-point for all Bluetooth interaction. Using this, you can discover other Bluetooth devices, query a list of bonded (paired) devices, instantiate a <a href="http://developer.android.com/reference/android/bluetooth/BluetoothDevice.html" target="_blank" style="font-family: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit;">BluetoothDevice</a> using a known MAC address</p></h5><h4><strong><br>
</strong></h4><h4><strong>2. BluetoothDevice:</strong></h4><p>
	Represents a remote Bluetooth device. Use this to request a connection with a remote device through a <a href="http://developer.android.com/reference/android/bluetooth/BluetoothSocket.html" target="_blank">BluetoothSocket</a> or query information about the device such as its name, address, class, and bonding state.</p><h4></h4><h4></h4><h4></h4><h4>3. BluetoothSocket:</h4><p>
	Represents the interface for a Bluetooth socket . This is the connection point that allows an application to exchange data with another Bluetooth device via InputStream and OutputStream.</p><h4></h4><h3>RSSI: Received Signal Strength Indicator</h3><ul>
	<li><strong>Broadcasting Power </strong>is the <strong>power with which the beacon(</strong>a device transmitting signal<strong>) broadcasts its signal</strong>, i.e. the power with which the signal leaves the beacon's antenna. The owner of the beacon can change this setting . The value ranges between <strong>-30 dBm and +4 dBm</strong>, lowest to highest power settings respectively. The higher the power, the bigger the beacon's range and the more stable the signal, but it also shortens the battery life of the beacon—so you might want to consider lowering it to the minimum required by your use case.</li>	<li><strong>RSSI</strong> is the <strong>strength of the beacon's signal</strong> as seen on the receiving device, e.g. a smartphone. In general, the greater the distance between the device and the beacon, the lesser the strength of the received signal. Think: if you drop a stone into a container with water, the wave is bigger near the point of impact and smaller further away.</li>	<li><strong>Measured Power</strong> is a factory-calibrated, read-only constant which indicates what's the expected RSSI at a distance of 1 meter to the beacon. Combined with RSSI, this allows to estimate the actual distance between the device and the beacon.</li></ul><h3>Battery - Saving Mechanism</h3><ul>
	<li>The greater the signal power, the more energy is radiated through the beacon’s antenna. The greater this energy is, the greater the range at which phones will be able to pick up the signal via their built-in antennas and convert it into information. Changing the broadcasting power effectively changes the beacon’s broadcast range.<br>
	Advertising interval defines how frequently radio signals are broadcast. Beacons can be thought of as tiny lighthouses, intermittently flashing information into the surrounding area. The more frequent the flashes, the greater the chance a receiver will see them. Of course, beacons can be set to broadcast all the time, but that requires a lot of energy and dramatically reduces the battery life. The bluetooth  module HC-05 send signals after definite intervals of time and thus increasing battery life .
	</li>	<li><strong>Bluetooth Sniff Mode</strong> - Sniffing  is a process of listening for specific types of commands that occur periodically, thus , remaining inactive in the period between of listening to signals. Sniffing is used for devices that must continuously be in contact with the master. There are various modes for the HC-05 bluetooth module. The Bluetooth sniff mode is used to reduce the power consumption of the device as the receiver can be put into standby between sniff cycles.</li>	<li>The 9V battery is used in the hardware such that the user can replace it once completely consumed. This will help the device to be recycled rather than bringing a new device altogether.</li></ul><h3>Serial Communication</h3><ul>
<li>S<strong>erial Communication</strong> is the process of sending data one bit at a time, sequentially, over a <strong>communication</strong> channel or computer bus. This is in contrast to parallel <strong>communication</strong>, where several bits are sent as a whole, on a link with several parallel channels.</li><li>All Arduino boards have at least one serial port (also known as a UART or USART): Serial. It communicates on digital pins 0 (RX) and 1 (TX) as well as with the computer via USB.</li><li>Serial communication works on 1s and 0s. Also known as binary, the Arduino sends these 1s and 0s (bits) one by one, or Serially through TX pin. These bits are sent in the form of Highs(1) and Lows(0). These bits form together and turn into bytes. A byte is composed of 8 bits. </li></ul><h3></h3>