<ul><li><strong>Dynamic Time Warping</strong><ul><li>In time series analysis, <strong>dynamic time warping</strong> (DTW) is an algorithm for measuring similarity between two temporal sequences which may vary in time or speed.</li><li>We applied this algorithm in comparing the recorded accelerometer readings with those of the template. This was required because a wearer moves his or her hands through the air with a unique speed</li></ul><p>                                                     .<img src="https://lh3.googleusercontent.com/FQoZ2UebzScY9d8pT-8lgBhg2R3lLgUBSFpDquNWfkTdqfqzN6VkFR2P0ioqzduzhlmKO63dNWA2EUVNXkl4QZ0AgCIF-NA-AQACquOeT6Ln7ec66XkUWcDoaukoNe9kegVZuFxQnw" style="width: 286px;" width="409px;" height="401px;"></p></li></ul><p>For example, the readings of the accelerometer when two users make the same hand-movement could be as shown in the figure. The lines are graphs representing the reading at a particular instant. Clearly, the two lines have similar, but not identical, shapes. So, we need an algorithm for ascertaining that the wearers intended to make the same motion. This is where DTW becomes handy.</p><p>In the graph, the readings at a particular instant of time are charted to form a path from one corner to another. A perfect match would be a straight line from one corner to the other. If the variation between the ideal line and the observed one is minimal, a match is <strong>confirmed.</strong></p><ul>
<li><strong>USART</strong> </li></ul><p>UART is a communication protocol used to transmit and receive data serially in a microcontoller. We have used the UART protocol of ATMega2560  <strong>to send data serially through bluetooth module.</strong></p><p><br><strong></strong></p><p style="margin-left: 20px;"></p><p style="margin-left: 20px;"></p><ul>
<li><strong>Android Spell-Check</strong></li></ul><p>American Sign Language doesn't have a symbol for a blank space. So we needed a method to add spaces in between words. For this we used the Android textservice class and implemented the SpellCheckerSessionLIstener interface in our App's Java code. An unintended benefit of doing this is that the user's spelling mistakes are also corrected by the App.</p><ul>
<li><strong>Android Text-To-Speech</strong></li></ul><p>For converting the letters that are interpreted from the user's signs to speech, we used the Android TextToSpeech class. A drawback of this is that only words in standard English can be converted, eg. Indian names won't work.</p>